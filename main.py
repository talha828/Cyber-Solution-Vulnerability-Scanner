import os
import sys
from base64 import b64encode
from utils.db import JsonDB
from utils.status import *
import utils.multitask as multitask
import utils.console as console
import utils.data as data
import plugins
import scripts
import signal

# Hard-coded single target
targets = ["ptiusaofficial.com"]
# Hard-coded number of workers and database file name
number_of_workers = 10
#output file path
db_file = f"output/{targets[0]}.json"
# Assume ping is needed; you can set it to False if not required
ping_needed = False

# Use the directory of this script as the target directory
dir_target = os.path.dirname(os.path.realpath(__file__))

os.chdir(sys.path[0])

console.banner(len(plugins.loader.loaded))
os.chdir(dir_target)
channels = {}
db = JsonDB(db_file)

def onexit(sig, frame):
    for plugin in plugins.loader.loaded:
        try:
            channels[plugin].close()
        except:
            pass
    os._exit(0)

def dbsave(result):
    res = result.ret
    host = result.args[0]
    name = result.channel.name
    if result.ret is None:
        return

    console.pprint(result)
    if name not in db.data:
        db.data[name] = {}

    db.data[name].update({
        host: {
            'status': res.status,
            'msg': res.msg,
            # 'response': data.compress(res.response),
            # 'request': data.compress(res.request)
        }
    })

    db.save()

def scan(host):
    for plugin in plugins.loader.loaded:
        if not plugin.enable or not plugin.presquites(host):
            continue
        channels[plugin].append(host)

signal.signal(signal.SIGINT, onexit)
console.output(LOG, "checking live targets")

if ping_needed:
    scripts.ping(targets, silent=False)
else:
    scripts.ping(targets, silent=True)
console.output(LOG, "performed in-memory save for online targets")

for plugin in plugins.loader.loaded:
    channel = multitask.Channel(plugin.name)
    channels.update({
        plugin: channel
    })
    multitask.workers(
        target=plugin.main,
        channel=channel,
        count=number_of_workers,
        callback=dbsave
    )

queue = multitask.Channel('scan-queue')
multitask.workers(target=scan, channel=queue, count=number_of_workers)

for target in targets:
    queue.append(target)

queue.wait()
queue.close()

for plugin in plugins.loader.loaded:
    channels[plugin].wait()

for plugin in plugins.loader.loaded:
    channels[plugin].close()
